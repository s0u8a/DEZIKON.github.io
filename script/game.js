import { maps, tile } from "./map.js";
import { player, initPlayer, takeDamage, updatePlayer, drawLifeGauge, heal } from "./player.js";
import { initEnemies, updateEnemies, drawEnemies } from "./enemy.js";
import { checkGoal, checkGameOver } from "./ending.js";
import { startEggGame } from "./eggGame.js";
import { startFishingGame } from "./fishingGame.js";

const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
ctx.imageSmoothingEnabled = false;

const statusEl = document.getElementById("messageBox");
function setStatus(msg) {
  if (statusEl) statusEl.textContent = msg;
  console.log(msg);
}

const images = {
  floor: new Image(),
  wall:  new Image(),
  enemy: new Image(),
  item:  new Image(),
  ally:  new Image(),
  goal:  new Image(),
  pl:    new Image(),
  heart: new Image()
};
images.floor.src = "./assets/images/tanbo3.png";
images.wall.src  = "./assets/images/mizu_big.png";
images.enemy.src = "./assets/images/enemy.png";
images.item.src  = "./assets/images/komebukuro.png";
images.ally.src  = "./assets/images/murabitopng.png";
images.goal.src  = "./assets/images/goal.png";
images.pl.src    = "./assets/images/noumin.png";
images.heart.src = "./assets/images/ha-to.png";

let currentMapIndex = 0;
let map = maps[currentMapIndex];
let nearAlly = false;

initPlayer(map);
initEnemies(map);

const dpr = window.devicePixelRatio || 1;
function resizeCanvas() {
  canvas.width = map[0].length * tile * dpr;
  canvas.height = map.length * tile * dpr;
  canvas.style.width = map[0].length * tile + "px";
  canvas.style.height = map.length * tile + "px";
  ctx.setTransform(1, 0, 0, 1, 0, 0);
  ctx.scale(dpr, dpr);
}
resizeCanvas();

function walkable(x, y) {
  if (x < 0 || x >= map[0].length || y < 0 || y >= map.length) return false;
  return map[y][x] !== "#";
}

function nextMap() {
  currentMapIndex++;
  if (currentMapIndex >= maps.length) {
    setStatus("üéâ ÂÖ®„ÇØ„É™„Ç¢ÔºÅÔºÅ");
    return;
  }
  map = maps[currentMapIndex];
  initPlayer(map);
  initEnemies(map);
  resizeCanvas();
  setStatus(`‚û° „Éû„ÉÉ„Éó${currentMapIndex + 1} „Å∏ÈÄ≤„Çì„Å†ÔºÅ`);
}

function onTile(x, y) {
  const cell = map[y][x];
  if (cell === "A") {
    setStatus("ü§ù Êùë‰∫∫„Åå„ÅÑ„ÇãÔºÅEnter„ÅßË©±„Åó„Åã„Åë„Å¶„Åè„Å†„Åï„ÅÑ");
    nearAlly = true;
  } else {
    nearAlly = false;
  }
}

document.addEventListener("keydown", (e) => {
  let nx = player.x, ny = player.y;

  if (e.key === "ArrowUp") ny--;
  else if (e.key === "ArrowDown") ny++;
  else if (e.key === "ArrowLeft") nx--;
  else if (e.key === "ArrowRight") nx++;
  else if (e.key === "Enter" && nearAlly) {
    // ü•ö Êùë‰∫∫„Ç§„Éô„É≥„Éà ‚Üí Âçµ„Ç≤„Éº„É†
    setStatus("üí¨ Êùë‰∫∫„ÄéÁî∞„Çì„Åº„ÇíËçí„Çâ„Åô„Ç∏„É£„É≥„Éú„Çø„Éã„Ç∑„ÅÆÂçµ„Çí„Å§„Å∂„Åó„Å¶„Åè„ÇåÔºÅ„Äè");
    setTimeout(() => {
      startEggGame((score) => {
        if (score >= 10) {
          heal(1, setStatus);
          setStatus(`ü•ö Âçµ„ÇíÂ§ßÈáè„Å´„Å§„Å∂„Åó„ÅüÔºÅHPÂõûÂæ©ÔºÅ`);
        } else {
          setStatus(`ü•ö Âçµ„Å§„Å∂„Åó„Çπ„Ç≥„Ç¢: ${score}`);
        }
      });
      map[player.y][player.x] = "0"; // Êùë‰∫∫„ÇíÊ∂à„Åô
      nearAlly = false;
    }, 1500);
    return;
  } else return;

  if (walkable(nx, ny)) {
    player.x = nx;
    player.y = ny;

    if (checkGoal(map, player.x, player.y)) {
      setStatus("üèÅ „Ç¥„Éº„É´ÔºÅ");
      nextMap();
      return;
    }

    onTile(nx, ny);
  }

  // üé£ „Éû„ÉÉ„Éó2 ‚Üí ÊïµÊé•Ëß¶„ÅßÈá£„Çä„Ç≤„Éº„É†
  if (currentMapIndex === 1) {
    updateEnemies(walkable, player, () => {
      // „Åæ„Åö„ÉÄ„É°„Éº„Ç∏„Çí‰∏é„Åà„Çã
      takeDamage(1, setStatus);

      // Èá£„Çä„Ç≤„Éº„É†ÈñãÂßã
      startFishingGame((score) => {
        if (score >= 10) {
          heal(1, setStatus);
          setStatus(`üêü „Éñ„É©„ÉÉ„ÇØ„Éê„Çπ„Çí ${score} ÂåπÈá£„Å£„ÅüÔºÅHPÂõûÂæ©ÔºÅ`);
        } else if (score <= 0) {
          takeDamage(1, setStatus);
          setStatus(`‚ùå „Éñ„É©„ÉÉ„ÇØ„Éê„Çπ„ÅåÂ∞ë„Å™„Åô„Åé„Çã‚Ä¶Â§ñÈÅì„Å∞„Åã„ÇäÔºÅHPÊ∏õÂ∞ë`);
        } else {
          setStatus(`üé£ Èá£Êûú: „Éñ„É©„ÉÉ„ÇØ„Éê„Çπ ${score}Âåπ`);
        }

        // üõë Êïµ„ÇíÊ∂à„Åô
        map[player.y][player.x] = "0";
      });
    });
  } else {
    updateEnemies(walkable, player, (amt) => takeDamage(amt, setStatus));
  }

  if (checkGameOver(player, setStatus)) return;
});

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  for (let y = 0; y < map.length; y++) {
    for (let x = 0; x < map[0].length; x++) {
      const dx = x * tile;
      const dy = y * tile;
      ctx.drawImage(images.floor, dx, dy, tile, tile);
      const cell = map[y][x];
      if (cell === "#") ctx.drawImage(images.wall, dx, dy, tile, tile);
      if (cell === "I") ctx.drawImage(images.item, dx, dy, tile, tile);
      if (cell === "A") ctx.drawImage(images.ally, dx, dy, tile, tile);
      if (cell === "G") ctx.drawImage(images.goal, dx, dy, tile, tile);
    }
  }

  drawEnemies(ctx, images.enemy, tile, 0, 0, map[0].length * tile, map.length * tile);
  ctx.drawImage(images.pl, player.x * tile, player.y * tile, tile, tile);
  drawLifeGauge(ctx, images.heart, tile, player);

  updatePlayer();
  requestAnimationFrame(draw);
}

window.startGame = function () {
  currentMapIndex = 0;
  map = maps[currentMapIndex];
  initPlayer(map);
  initEnemies(map);
  resizeCanvas();
  setStatus("‚úÖ „Ç≤„Éº„É†ÈñãÂßã");
  draw();
};
